"""
Фактор палиндромности
Ограничение времени	1 секунда
Ограничение памяти	512Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Решение, проходящее все тесты, будет оценено в 3 балла.

Аркадий — большой фанат использования машинного обучения в любой задаче.
Он верит в безграничную силу волшебства этой популярной молодой науки.
Именно поэтому Аркадий постоянно постоянно придумывает всё новые и новые факторы,
которые можно вычислить для различных объектов.
Напомним, палиндромом называется строка, которая одинаково читается от начала к концу и от конца к началу.
Для каждой строки в своей базе данных Аркадий хочет найти самую короткую её подстроку,
состоящую хотя бы из двух символов и являющуюся палиндромом. Если таких подстрок несколько,
Аркадий хочет выбрать лексикографически минимальную.

Формат ввода
В единственной строке входных данных записана одна строка из базы Аркадия — непустая последовательность строчных букв
английского алфавита. Длина строки составляет не менее 2 и не превосходит 200000 символов.
Формат вывода
Выведите минимальную по длине подстроку строки из входных данных, состоящую хотя бы из двух символов и являющуюся палиндромом.
Если такой подстроки нет, то выведите −1.
Напомним, что среди всех таких строк Аркадий хочет найти лексикографически минимальную.
"""


def palindromes(text):
    """
    Функция обрабатывает введенный текст и ищет наименьший палиндром, например aa bb aba bab
    Логика построена на проверке текста кусочками, так как мы ищем самый маленький палиндром, если он находится
    между 1 и 3 символом то нет смысла проверять текст от 0 до n. Правильнее начать проверку от 3 до n
    :param text: На вход функция принимает введенный текст, это должен быть string
    :return: Функция возвращает либо самый короткий палиндром либо -1
    """
    a = 0  # Объявляем переменную a равную изначально 0, в нее в цикле запишем точку начала проверки текста
    palindrome = None  # Объявляем палиндром, изначально равный ничему

    for i in range(len(text)):  # Проходимся циклом длиной в длину введенного текста
        for j in range(a, i):  # Пройдемся циклом длиной от начала отсчета до символа из цикла выше
            chunk = text[j:i + 1]  # Кусок текста равен символам от j до i+1
            if chunk == chunk[::-1]:  # Если кусок текста палиндром
                if not palindrome:  # И это первый найденный палиндром
                    palindrome = chunk  # Тогда наш текущий палиндром будет равен куску текста chunk
                elif palindrome:  # Если мы уже нашли какой либо палиндром
                    if len(chunk) < len(palindrome):  # Если новый палиндром короче старого
                        palindrome = chunk  # Тогда меняем значение текущего палиндрома на chunk
                    elif len(chunk) == len(palindrome):  # Если новый палиндром и старый равны по длине
                        if chunk < palindrome:  # Сверяем палиндромы лексикографически, если новый короче
                            palindrome = chunk  # Меняем старый палиндром на новый chunk
            a = j  # Обновляем точку начала проверки текста

    if palindrome:  # Если нашли какой либо палиндром, возвращаем его
        return palindrome
    else:  # Если не нашли ни один палиндром, тогда возвращаем -1
        return "-1"


text = input()  # Получаем из ввода текст
print(palindromes(text=text))  # Выводим результат обработки текста на консоль
